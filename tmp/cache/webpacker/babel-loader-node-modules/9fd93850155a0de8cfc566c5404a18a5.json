{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// A reference to Stripe.js initialized with a fake API key.\nvar public_key = document.querySelector(\"meta[name='stripe-public-key']\").content;\nvar stripe = Stripe(public_key); // The items the customer wants to buy\n\nvar items = [{\n  id: \"xl-tshirt\"\n}];\nvar elements;\ninitialize();\ncheckStatus(); // Fetches a payment intent and captures the client secret\n\nfunction initialize() {\n  return _initialize.apply(this, arguments);\n}\n\nfunction _initialize() {\n  _initialize = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var response, _yield$response$json, clientSecret, appearance, paymentElement;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(\"/create-payment-intent\", {\n              method: \"POST\",\n              headers: {\n                \"Content-Type\": \"application/json\"\n              },\n              body: JSON.stringify({\n                items: items\n              })\n            });\n\n          case 2:\n            response = _context.sent;\n            _context.next = 5;\n            return response.json();\n\n          case 5:\n            _yield$response$json = _context.sent;\n            clientSecret = _yield$response$json.clientSecret;\n            appearance = {\n              theme: 'stripe'\n            };\n            elements = stripe.elements({\n              appearance: appearance,\n              clientSecret: clientSecret\n            });\n            paymentElement = elements.create(\"payment\");\n            paymentElement.mount(\"#payment-element\");\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _initialize.apply(this, arguments);\n}\n\ndocument.querySelector(\"#payment_form\").addEventListener(\"submit\", handleSubmit);\n\nfunction handleSubmit(_x) {\n  return _handleSubmit.apply(this, arguments);\n} // Fetches the payment intent status after payment submission\n\n\nfunction _handleSubmit() {\n  _handleSubmit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(e) {\n    var _yield$stripe$confirm, error;\n\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            e.preventDefault();\n            setLoading(true);\n            _context2.next = 4;\n            return stripe.confirmPayment({\n              elements: elements,\n              confirmParams: {\n                // Make sure to change this to your payment completion page\n                return_url: \"http://localhost:3000/meetings\"\n              }\n            });\n\n          case 4:\n            _yield$stripe$confirm = _context2.sent;\n            error = _yield$stripe$confirm.error;\n\n            // This point will only be reached if there is an immediate error when\n            // confirming the payment. Otherwise, your customer will be redirected to\n            // your `return_url`. For some payment methods like iDEAL, your customer will\n            // be redirected to an intermediate site first to authorize the payment, then\n            // redirected to the `return_url`.\n            if (error.type === \"card_error\" || error.type === \"validation_error\") {\n              showMessage(error.message);\n            } else {\n              showMessage(\"An unexpected error occured.\");\n            }\n\n            setLoading(false);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _handleSubmit.apply(this, arguments);\n}\n\nfunction checkStatus() {\n  return _checkStatus.apply(this, arguments);\n} // ------- UI helpers -------\n\n\nfunction _checkStatus() {\n  _checkStatus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var clientSecret, _yield$stripe$retriev, paymentIntent;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n\n            if (clientSecret) {\n              _context3.next = 3;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 3:\n            _context3.next = 5;\n            return stripe.retrievePaymentIntent(clientSecret);\n\n          case 5:\n            _yield$stripe$retriev = _context3.sent;\n            paymentIntent = _yield$stripe$retriev.paymentIntent;\n            _context3.t0 = paymentIntent.status;\n            _context3.next = _context3.t0 === \"succeeded\" ? 10 : _context3.t0 === \"processing\" ? 12 : _context3.t0 === \"requires_payment_method\" ? 14 : 16;\n            break;\n\n          case 10:\n            showMessage(\"Payment succeeded!\");\n            return _context3.abrupt(\"break\", 18);\n\n          case 12:\n            showMessage(\"Your payment is processing.\");\n            return _context3.abrupt(\"break\", 18);\n\n          case 14:\n            showMessage(\"Your payment was not successful, please try again.\");\n            return _context3.abrupt(\"break\", 18);\n\n          case 16:\n            showMessage(\"Something went wrong.\");\n            return _context3.abrupt(\"break\", 18);\n\n          case 18:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n  return _checkStatus.apply(this, arguments);\n}\n\nfunction showMessage(messageText) {\n  var messageContainer = document.querySelector(\"#payment-message\");\n  messageContainer.classList.remove(\"hidden\");\n  messageContainer.textContent = messageText;\n  setTimeout(function () {\n    messageContainer.classList.add(\"hidden\");\n    messageText.textContent = \"\";\n  }, 4000);\n} // Show a spinner on payment submission\n\n\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    // Disable the button and show a spinner\n    document.querySelector(\"#submit\").disabled = true;\n    document.querySelector(\"#spinner\").classList.remove(\"hidden\");\n    document.querySelector(\"#button-text\").classList.add(\"hidden\");\n  } else {\n    document.querySelector(\"#submit\").disabled = false;\n    document.querySelector(\"#spinner\").classList.add(\"hidden\");\n    document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n  }\n}","map":{"version":3,"sources":["/home/dhrutipatel/MeetingScheduling/app/javascript/packs/checkout.js"],"names":["public_key","document","querySelector","content","stripe","Stripe","items","id","elements","initialize","checkStatus","fetch","method","headers","body","JSON","stringify","response","json","clientSecret","appearance","theme","paymentElement","create","mount","addEventListener","handleSubmit","e","preventDefault","setLoading","confirmPayment","confirmParams","return_url","error","type","showMessage","message","URLSearchParams","window","location","search","get","retrievePaymentIntent","paymentIntent","status","messageText","messageContainer","classList","remove","textContent","setTimeout","add","isLoading","disabled"],"mappings":"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","sourcesContent":["// A reference to Stripe.js initialized with a fake API key.\nconst public_key = document.querySelector(\"meta[name='stripe-public-key']\").content;\nconst stripe = Stripe(public_key);\n\n// The items the customer wants to buy\nconst items = [{ id: \"xl-tshirt\" }];\n\nlet elements;\n\ninitialize();\ncheckStatus();\n\n\n\n// Fetches a payment intent and captures the client secret\nasync function initialize() {\n  const response = await fetch(\"/create-payment-intent\", {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ items }),\n  });\n  const { clientSecret } = await response.json();\n\n  const appearance = {\n    theme: 'stripe',\n  };\n  elements = stripe.elements({ appearance, clientSecret });\n\n  const paymentElement = elements.create(\"payment\");\n  paymentElement.mount(\"#payment-element\");\n}\n\ndocument\n  .querySelector(\"#payment_form\")\n  .addEventListener(\"submit\", handleSubmit);\n\nasync function handleSubmit(e) {\n  e.preventDefault();\n  setLoading(true);\n\n  const { error } = await stripe.confirmPayment({\n    elements,\n    confirmParams: {\n      // Make sure to change this to your payment completion page\n      return_url: \"http://localhost:3000/meetings\",\n    },\n  });\n\n  // This point will only be reached if there is an immediate error when\n  // confirming the payment. Otherwise, your customer will be redirected to\n  // your `return_url`. For some payment methods like iDEAL, your customer will\n  // be redirected to an intermediate site first to authorize the payment, then\n  // redirected to the `return_url`.\n  if (error.type === \"card_error\" || error.type === \"validation_error\") {\n    showMessage(error.message);\n  } else {\n    showMessage(\"An unexpected error occured.\");\n  }\n\n  setLoading(false);\n}\n\n// Fetches the payment intent status after payment submission\nasync function checkStatus() {\n  const clientSecret = new URLSearchParams(window.location.search).get(\n    \"payment_intent_client_secret\"\n  );\n\n  if (!clientSecret) {\n    return;\n  }\n\n  const { paymentIntent } = await stripe.retrievePaymentIntent(clientSecret);\n\n  switch (paymentIntent.status) {\n    case \"succeeded\":\n      showMessage(\"Payment succeeded!\");\n      break;\n    case \"processing\":\n      showMessage(\"Your payment is processing.\");\n      break;\n    case \"requires_payment_method\":\n      showMessage(\"Your payment was not successful, please try again.\");\n      break;\n    default:\n      showMessage(\"Something went wrong.\");\n      break;\n  }\n}\n\n// ------- UI helpers -------\n\nfunction showMessage(messageText) {\n  const messageContainer = document.querySelector(\"#payment-message\");\n\n  messageContainer.classList.remove(\"hidden\");\n  messageContainer.textContent = messageText;\n\n  setTimeout(function () {\n    messageContainer.classList.add(\"hidden\");\n    messageText.textContent = \"\";\n  }, 4000);\n}\n\n// Show a spinner on payment submission\nfunction setLoading(isLoading) {\n  if (isLoading) {\n    // Disable the button and show a spinner\n    document.querySelector(\"#submit\").disabled = true;\n    document.querySelector(\"#spinner\").classList.remove(\"hidden\");\n    document.querySelector(\"#button-text\").classList.add(\"hidden\");\n  } else {\n    document.querySelector(\"#submit\").disabled = false;\n    document.querySelector(\"#spinner\").classList.add(\"hidden\");\n    document.querySelector(\"#button-text\").classList.remove(\"hidden\");\n  }\n}"]},"metadata":{},"sourceType":"module"}