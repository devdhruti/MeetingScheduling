{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\ndocument.addEventListener(\"turbolinks:load\", function () {\n  var public_key = document.querySelector(\"meta[name='stripe-public-key']\").content;\n  var stripe = Stripe(public_key);\n  var elements = stripe.elements();\n  var style = {\n    base: {\n      color: '#32325d',\n      lineHeight: '26px',\n      fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n      fontSmoothing: 'antialiased',\n      fontSize: '16px',\n      '::placeholder': {\n        color: '#aab7c4'\n      }\n    },\n    invalid: {\n      color: '#fa755a',\n      iconColor: '#fa755a'\n    }\n  };\n  var cardElement = document.getElementById('card-element');\n\n  if (cardElement != null) {\n    var addFieldToForm = function addFieldToForm(form, token, field) {\n      var hiddenInput = document.createElement('input');\n      hiddenInput.setAttribute('type', 'hidden');\n      hiddenInput.setAttribute('name', \"user[card_\" + field + \"]\");\n      hiddenInput.setAttribute('value', token.card[field]);\n      form.appendChild(hiddenInput);\n    };\n\n    var card = elements.create('card', {\n      style: style\n    });\n    card.mount(cardElement);\n    card.addEventListener('change', function (_ref) {\n      var error = _ref.error;\n      var displayError = document.getElementById('card-errors');\n\n      if (error) {\n        displayError.textContent = error.message;\n      } else {\n        displayError.textContent = '';\n      }\n    });\n    var form = document.querySelector('.meeting-form');\n    form.addEventListener('submit', /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var _yield$stripe$createT, token, error, errorElement;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                event.preventDefault();\n                _context.next = 3;\n                return stripe.createToken(card);\n\n              case 3:\n                _yield$stripe$createT = _context.sent;\n                token = _yield$stripe$createT.token;\n                error = _yield$stripe$createT.error;\n\n                if (error) {\n                  // Inform the customer that there was an error.\n                  errorElement = document.getElementById('card-errors');\n                  errorElement.textContent = error.message;\n                } else {\n                  // Send the token to your server.\n                  stripeTokenHandler(token);\n                }\n\n              case 7:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n\n    var stripeTokenHandler = function stripeTokenHandler(token) {\n      // Insert the token ID into the form so it gets submitted to the server\n      var form = document.querySelector('.meeting-form');\n      var hiddenInput = document.createElement('input');\n      hiddenInput.setAttribute('type', 'hidden');\n      hiddenInput.setAttribute('name', 'stripeToken');\n      hiddenInput.setAttribute('value', token.id);\n      form.appendChild(hiddenInput);\n      [\"brand\", \"exp_month\", \"exp_year\", \"last4\"].forEach(function (field) {\n        addFieldToForm(form, token, field);\n      }); // Submit the form\n\n      form.submit();\n    };\n  }\n});","map":{"version":3,"sources":["/home/dhrutipatel/MeetingScheduling/app/javascript/packs/payment.js"],"names":["document","addEventListener","public_key","querySelector","content","stripe","Stripe","elements","style","base","color","lineHeight","fontFamily","fontSmoothing","fontSize","invalid","iconColor","cardElement","getElementById","addFieldToForm","form","token","field","hiddenInput","createElement","setAttribute","card","appendChild","create","mount","error","displayError","textContent","message","event","preventDefault","createToken","errorElement","stripeTokenHandler","id","forEach","submit"],"mappings":"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","sourcesContent":["document.addEventListener(\"turbolinks:load\", function() {\n  const public_key = document.querySelector(\"meta[name='stripe-public-key']\").content;\n  const stripe = Stripe(public_key);\n  const elements = stripe.elements();\n\n  const style = {\n  base: {\n    color: '#32325d',\n    lineHeight: '26px',\n    fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n    fontSmoothing: 'antialiased',\n    fontSize: '16px',\n    '::placeholder': {\n      color: '#aab7c4'\n    }\n  },\n  invalid: {\n    color: '#fa755a',\n    iconColor: '#fa755a'\n  }\n};\n  const cardElement = document.getElementById('card-element');\n\n  if(cardElement != null) {\n\n    const card = elements.create('card', {style: style});\n    card.mount(cardElement);\n\n    card.addEventListener('change', ({error}) => {\n      const displayError = document.getElementById('card-errors');\n      if (error) {\n        displayError.textContent = error.message;\n      } else {\n        displayError.textContent = '';\n      }\n    });\n\n\n    const form = document.querySelector('.meeting-form');\n      form.addEventListener('submit', async (event) => {\n      event.preventDefault();\n\n      const {token, error} = await stripe.createToken(card);\n\n      if (error) {\n        // Inform the customer that there was an error.\n        const errorElement = document.getElementById('card-errors');\n        errorElement.textContent = error.message;\n      } else {\n        // Send the token to your server.\n        stripeTokenHandler(token);\n      }\n    });\n\n      const stripeTokenHandler = (token) => {\n      // Insert the token ID into the form so it gets submitted to the server\n      const form = document.querySelector('.meeting-form');\n      const hiddenInput = document.createElement('input');\n      hiddenInput.setAttribute('type', 'hidden');\n      hiddenInput.setAttribute('name', 'stripeToken');\n      hiddenInput.setAttribute('value', token.id);\n      form.appendChild(hiddenInput);\n\n      [\"brand\", \"exp_month\", \"exp_year\", \"last4\"].forEach(function(field) {\n         addFieldToForm(form, token, field);\n      });\n\n      // Submit the form\n      form.submit();\n    }\n\n    function addFieldToForm(form, token, field) {\n      var hiddenInput = document.createElement('input');\n      hiddenInput.setAttribute('type', 'hidden');\n      hiddenInput.setAttribute('name', \"user[card_\" + field + \"]\");\n      hiddenInput.setAttribute('value', token.card[field]);\n      form.appendChild(hiddenInput);\n    }\n  }\n\n});"]},"metadata":{},"sourceType":"module"}